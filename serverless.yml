service: sls-reto-rimac
frameworkVersion: '3'
custom:
    autoswagger:
        title: 'Reto Rimac'
        description: 'Reto TÃ©cnico encargado por Indra.'
        apiType: 'httpApi'
        typefiles: ['./src/types/api-planets.d.ts', './src/types/api-films.d.ts']

provider:
  name: aws
  runtime: nodejs18.x
  region: us-west-2
  environment:
    DYNAMO_TABLE: PlanetsTable
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - arn:aws:dynamodb:us-west-2:058264470307:table/TaskTable

functions:
  api:
    handler: src/index.handler
    events:
      - httpApi:
          path: /
          method: get
  getFilmSwapi:
    handler: src/functions/films/getFilmSwapi.handler
    events:
      - httpApi:
          path: /films/swapi/{id}
          method: get
          responseData: {
              201: {
                  description: 'Devuelve resultado de la busqueda por id de SWApi',
                  bodyType: "getFilm",
              },
              404: {
                  description: 'Devuelve un mensaje con le texto No se encontraron resultados',
                  bodyType: "response"
              },
              500: {
                  description: 'Ocurrio un problema',
                  bodyType: "response"
              },
          }
  getFilmsSwapi:
    handler: src/functions/films/getFilmsSwapi.handler
    events:
      - httpApi:
          path: /films/swapi
          method: get
          responseData: {
              201: {
                  description: 'Devuelve un array de objetos con los resultados de SWApi | films'
              },
              500: {
                  description: 'Ocurrio un problema',
                  bodyType: "response"
              },
          }
  addPlanet:
    handler: src/functions/planets/addPlanet.handler
    events:
      - httpApi:
          path: /planets
          method: post
          bodyType: varPlanet
          responseData: {
              201: {
                  description: 'Devuelve el id del planeta agregado',
                  bodyType: "addPlanetResponse",
              },
              500: {
                  description: 'Ocurrio un problema',
                  bodyType: "response"
              },

          }
  getPlanets:
    handler: src/functions/planets/getPlanets.handler
    events:
      - httpApi:
          path: /planets
          method: get
          responseData: {
              200: {
                  description: 'Devuelve un array de objetos con los resultados de la db planetas'
              },
              500: {
                  description: 'Ocurrio un problema',
                  bodyType: "response"
              },
          }
  getPlanet:
    handler: src/functions/planets/getPlanet.handler
    events:
      - httpApi:
          path: /planets/{id}
          method: get
          responseData: {
              201: {
                  description: 'Devuelve resultado del planeta de Dynamodb',
                  bodyType: "varPlanet",
              },
              404: {
                  description: 'Devuelve un mensaje con le texto No se encontraron resultados',
                  bodyType: "response"
              },
              500: {
                  description: 'Ocurrio un problema',
                  bodyType: "response"
              },
          }

resources:
  Resources:
    TaskTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: PlanetsTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
plugins:
  - serverless-auto-swagger
  - serverless-jest-plugin
  - serverless-offline
